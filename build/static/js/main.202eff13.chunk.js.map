{"version":3,"sources":["img/daft-punk.jpg","components/NavBar.js","components/Item.js","components/MiniCartItem.js","components/MiniCart.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","props","useState","cartActive","setCartActive","className","href","onClick","e","preventDefault","toggleMiniCart","Item","itemData","in_cart","itemAdded","setItemAdded","name","price","type","AddToCartButton","inCart","openCart","addToCart","toggleMiniCartCallback","cartItemActionsCallback","src","require","alt","MiniCartItem","min","placeholder","console","log","MiniCart","showCart","show","setShow","showClassNames","itemActions","action","MiniCartItemsHandler","items","map","item","key","id","event","target","closeCallback","App","shopData","state","setState","setShowCart","cartItemActions","i","length","NavBarHandler","MiniCartHandler","itemsInCart","push","ItemsHandler","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.202eff13.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/daft-punk.26353003.jpg\";","import React, { useState } from 'react';\r\n\r\nconst NavBar = (props) =>  {\r\n    \r\n    const [cartActive, setCartActive] = useState(props.cartActive)\r\n\r\n    const toggleCart = (e) => {\r\n        e.preventDefault();\r\n\r\n        setCartActive(!cartActive)\r\n        props.toggleMiniCart(!cartActive);\r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom shadow-sm\">\r\n            <h5 className=\"my-0 mr-md-auto font-weight-normal\">React Ecommerce</h5>\r\n            <nav className=\"my-2 my-md-0 mr-md-3\">\r\n                <a className=\"pt-2 px-4 text-dark\" href=\"#\"><i className=\"fas fa-user\"></i></a>\r\n                <a className=\"pt-2 px-5 text-dark\" href=\"#\" onClick={toggleCart}><i className=\"fas fa-shopping-cart\"></i></a>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default NavBar;","import React, { useState } from 'react';\r\n\r\nconst Item = (props) =>  {\r\n    //console.log(props.itemData);\r\n    const [itemAdded, setItemAdded] = useState(props.itemData.in_cart);\r\n    const { name, price, type } = props.itemData;\r\n\r\n    const AddToCartButton = (props) => {\r\n        if (props.inCart) {\r\n            return <p className=\"add-to-cart\" onClick={openCart}><i className=\"fas fa-shopping-cart\"></i></p>\r\n        } else {\r\n            return <p className=\"add-to-cart\" onClick={addToCart}>Add to Cart</p>\r\n        }\r\n    }\r\n\r\n    const openCart = (e) => {\r\n        e.preventDefault();\r\n        props.toggleMiniCartCallback(true);\r\n    }\r\n\r\n    // Dentro de addToCart podemos pasarle la info al componente padre y que el administre la guardada al carrito\r\n    const addToCart = () => {\r\n        setItemAdded('added');\r\n        // sending the children componente data to the parent component\r\n        props.cartItemActionsCallback(props.itemData, 'add');\r\n    }\r\n\r\n    const removeOfCart = () => {\r\n        setItemAdded(false);\r\n        props.cartItemActionsCallback(props.itemData, 'remove');\r\n    }\r\n\r\n    // De forma similar a componentDidMount y componentDidUpdate\r\n\r\n    //sendData();\r\n    return(\r\n        <div className=\"col-md-4\">\r\n            <div className=\"item py-3\">\r\n                <img className=\"img-fluid\" src={require('../img/daft-punk.jpg')} alt=\"{name}\" />\r\n                <div>\r\n                    <div className=\"item-info\">\r\n                        <p className=\"info\">{name} <span className=\"price\"> ${price}</span></p>\r\n                        <AddToCartButton inCart={itemAdded} />\r\n                    </div>\r\n                    <div>\r\n                        <p className=\"item-cat\">{type}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Item;","import React, { useState } from 'react';\r\n\r\nconst MiniCartItem = (props) => {\r\n\r\n    const [itemAdded, setItemAdded] = useState(props.itemData.in_cart);\r\n    const { name, price, type } = props.itemData;\r\n\r\n    const removeOfCart = () => {\r\n        console.log('removeOfCart - MiniCartItem');\r\n        setItemAdded(false);    \r\n        props.cartItemActionsCallback(props.itemData, 'remove');\r\n    }\r\n\r\n    if (itemAdded){\r\n\r\n        return(\r\n            <div className=\"row py-3\">\r\n                <div className=\"col-3\">\r\n                    <img className=\"img-fluid\" src={require('../img/daft-punk.jpg')} alt=\"{name}\" />\r\n                </div>\r\n                <div className=\"col-4\">\r\n                    <div className=\"item-col\">\r\n                        <p>{name}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-3\">\r\n                    <div className=\"item-col\">\r\n                        <input type=\"number\" min=\"1\" placeholder=\"1\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-2\">\r\n                    <div className=\"item-col\">\r\n                        <span className=\"delete-item\" onClick={removeOfCart}>&times;</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return ''\r\n    }\r\n\r\n}\r\n\r\nexport default MiniCartItem;","import React, { useState } from 'react';\r\nimport MiniCartItem from './MiniCartItem';\r\n\r\nconst MiniCart = (props) => {\r\n\r\n    const [show, setShow] = useState(props.showCart)\r\n    /* const [miniCartItems, setMiniCartItems] = useState(props.items) */\r\n    \r\n    let showClassNames  = show ? 'modal show' : 'modal';\r\n\r\n    const closeMiniCart = (event) => {\r\n        \r\n        // Minicart will close if, click if outside of Cart or in the close <span>\r\n        if (event.target.id === 'cart' || event.target.id === 'close') {\r\n            setShow(false);\r\n            props.closeCallback(false);\r\n        }\r\n        \r\n    }\r\n\r\n    const itemActions = (itemData, action) => {\r\n        props.cartItemActionsCallback(itemData, 'remove');\r\n        \r\n    }\r\n\r\n    const MiniCartItemsHandler = () => {\r\n        return (\r\n            props.items.map(item => {\r\n\r\n                if (item.in_cart){\r\n                    return (<MiniCartItem\r\n                        key={item.name}\r\n                        cartItemActionsCallback={itemActions}\r\n                        itemData={item}\r\n                    />)\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div id=\"cart\" className={showClassNames} onClick={closeMiniCart}>\r\n            <div className=\"modal-content col-md-6\" >\r\n                <div className=\"cart-header\">\r\n                    <h3>Cart</h3>\r\n                    <span id=\"close\" className=\"close\">&times;</span>\r\n                </div>\r\n                <div className=\"cart-body\">\r\n                    <MiniCartItemsHandler />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MiniCart;","import React, { useState } from 'react';\r\nimport NavBar from './components/NavBar';\r\nimport Item from './components/Item';\r\nimport './styles/custom/global.css';\r\nimport MiniCart from './components/MiniCart';\r\nimport shopData from './shop-data.json';\r\n\r\n\r\nconst App = () => {\r\n\t\r\n\tconst [state, setState] = useState(shopData);\r\n\tconst [showCart, setShowCart] = useState(false);\r\n\r\n\tconst toggleMiniCart = (cartActive) => {\r\n\t\tsetShowCart(cartActive)\r\n\t\t\r\n\t}\r\n\r\n\tconst cartItemActions = (itemData, action) => {\r\n\r\n\t\tconsole.log('cartItemActions - App');\r\n\t\tconsole.log(state.items)\r\n\t\tconsole.log('---------------------')\r\n\r\n\t\tfor (var i = 0; i < state.items.length; i++) {\r\n\t\t\t\r\n\t\t\tif (state.items[i].id == itemData.id) {\r\n\t\t\t\t\r\n\t\t\t\t/* if (action === 'add') {\r\n\t\t\t\t\tstate.items[i].in_cart = true;\r\n\t\t\t\t\t//state.items.push(itemData)\r\n\t\t\t\t\tconsole.log(state.items)\r\n\r\n\t\t\t\t} else if (action === 'remove'){\r\n\t\t\t\t\tstate.items[i].in_cart = false;\r\n\t\t\t\t} */\r\n\r\n\t\t\t\tswitch (action) {\r\n\t\t\t\t\tcase 'add':\r\n\t\t\t\t\t\tstate.items[i].in_cart = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'remove': \r\n\t\t\t\t\t\tstate.items[i].in_cart = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tsetState(state);\r\n\t\tconsole.log(state)\r\n\t\t\r\n\t\t//setState(state.items.push(itemData))\r\n\t}\r\n\r\n\tconst NavBarHandler = () => {\r\n\t\t\r\n\t\treturn <NavBar toggleMiniCart={toggleMiniCart} cartActive={showCart} />\t\r\n\t}\r\n\r\n\tconst MiniCartHandler = () => {\r\n\t\tlet itemsInCart = [];\r\n\t\t\r\n\t\tstate.items.map( item => {\r\n\t\t\tif (item.in_cart) {\r\n\t\t\t\titemsInCart.push(item);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn (\r\n\t\t\t<MiniCart \r\n\t\t\t\tshowCart={showCart} \r\n\t\t\t\titems={itemsInCart} \r\n\t\t\t\tcloseCallback={toggleMiniCart} \r\n\t\t\t\tcartItemActionsCallback={cartItemActions} \r\n\t\t\t/>\r\n\t\t)\r\n\r\n\t}\r\n\t\r\n\tconst ItemsHandler = () => {\r\n\r\n\t\treturn (\r\n\t\t\tstate.items.map(item =>\r\n\t\t\t\t\r\n\t\t\t\t<Item\r\n\t\t\t\t\tkey={item.name}\r\n\t\t\t\t\tcartItemActionsCallback={cartItemActions}\r\n\t\t\t\t\ttoggleMiniCartCallback={toggleMiniCart}\r\n\t\t\t\t\titemData={item}\r\n\t\t\t\t\tinCart={item.in_cart}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t)\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div className=\"app\" >\r\n\t\t\t<div className=\"page\">\r\n\t\t\t\t<NavBarHandler />\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<div className=\"pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center\">\r\n\t\t\t\t\t\t<h1 className=\"display-4\">Albums</h1>\r\n\t\t\t\t\t\t<p className=\"lead\">Best albums ever made.</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\r\n\t\t\t\t<div className=\"container pb-5\">\r\n\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t<ItemsHandler />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<footer className=\"pt-4 my-md-2 pt-md-4 border-top\">\r\n\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t\t\t\t<small className=\"d-block mb-3 text-muted text-center\">&copy; React Ecommerce 2020</small> \r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</footer>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<MiniCartHandler/>\r\n\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './styles/plugins/bootstrap.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}